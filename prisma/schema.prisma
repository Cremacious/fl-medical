datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"] 
}
 
model User {
  id       String   @id @default(uuid())
  clerkUserId String   @unique
  username String   @unique
  imageUrl    String?
  email     String?   @unique
  role          String    @default("user")
  stashItems    StashItem[]
  history       Purchase[]
  posts        Post[]
 sentRequests  FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FriendRequest {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus @default(PENDING)
  createdAt  DateTime @default(now())

  sender     User @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}
 
 
model Purchase {
  id       String   @id @default(uuid())
  userId    String
  date     DateTime @default(now())
  dispensary String
  total    Float
  quantity Int
  purchaseItems PurchaseItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PurchaseItem {
  id         String   @id @default(uuid())
  purchaseId String
  name      String
  category String?
  type     String?
  size     String?
  quantity Int?
  price    Float?
  thc     Float?
  cbd     Float?
  lineage String?
  details String?

  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

model StashItem {
  id         String   @id @default(uuid())
  userId     String
  name       String
  category   String?
  type       String?
  size       String?
  thc        String?
  cbd        String?
  lineage    String?
  thoughts    String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String?
}

model Post {
  id         String   @id @default(uuid())
  userId     String
  activity   String
  location   String   @default("N/A")
  stashItems Json
  content    String   @default("N/A")
  date       DateTime @default(now())

  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}