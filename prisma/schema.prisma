// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  password      String?
  role          String    @default("user")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  address       Json?     @db.Json
  paymentMethod String?
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  stashItems     StashItem[]
  history        Purchase[]
  posts          Post[]
  account       Account[]
  session       Session[]
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "account_userId_user_id_fk")
  @@id([provider, providerAccountId], map: "account_provider_providerAccountId_pk")
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "session_userId_user_id_fk")
}

 model Purchase {
  id       String   @id @default(uuid())
  userId    String @db.Uuid
  date     DateTime @default(now())
  dispensary String
  total    Float
  quantity Int
  purchaseItems PurchaseItem[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PurchaseItem {
  id         String   @id @default(uuid())
  purchaseId String
  name      String
  category String?
  type     String?
  size     String?
  quantity Int?
  price    Float?
  thc     Float?
  cbd     Float?
  lineage String?
  details String?

  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
}

model StashItem {
  id         String   @id @default(uuid())
  userId     String @db.Uuid
  name       String
  category   String?
  type       String?
  size       String?
  thc        String?
  cbd        String?
  lineage    String?
  thoughts   String?
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String? 
}

model Post {
  id         String   @id @default(uuid())
  userId     String @db.Uuid
  activity   String
  location   String   @default("N/A")
  stashItems Json
  content    String   @default("N/A")
  date       DateTime @default(now())

  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}